--
-- ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗
-- ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║
-- ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║
-- ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║
-- ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║
-- ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝
-- date: 6/4/2023
-- name: Aditya Agrawal

return {
  {
    "rcarriga/nvim-dap-ui",
    event = { "BufReadPre", "BufNewFile" },
    dependencies = {
      { "mfussenegger/nvim-dap" },
      "folke/neodev.nvim",
      "simrat39/rust-tools.nvim",
      "williamboman/mason.nvim",
      "jay-babu/mason-nvim-dap.nvim",
    },
    opts = {
      layouts = {
        {
          elements = {
            {
              id = "scopes",
              size = 0.25,
            },
            {
              id = "breakpoints",
              size = 0.25,
            },
            {
              id = "stacks",
              size = 0.25,
            },
            {
              id = "watches",
              size = 0.25,
            },
          },
          position = "right",
          size = 40,
        },
      },
      servers = {
        codelldb = {}, -- rust
        debugpy = {},
        nlua = {},
      },
      server_config = {
        -- write your own dap config for dap
        codelldb = function(server_name)
          local mason_registry = require("mason-registry")
          local rootpath = mason_registry.get_package(server_name):get_install_path() .. "/extension/"
          local codelldb_path = rootpath .. "adapter/codelldb"
          local liblldb_path = rootpath .. "lldb/lib/liblldb.so"
          return require("rust-tools").dap.get_codelldb_adapter(codelldb_path, liblldb_path)
        end,
      },
    },
    config = function(_, opts)
      local servers = opts.servers
      local sign = vim.fn.sign_define

      sign("DapBreakpoint", { text = "●", texthl = "DapBreakpoint", linehl = "", numhl = "" })
      sign("DapBreakpointCondition", { text = "●", texthl = "DapBreakpointCondition", linehl = "", numhl = "" })
      sign("DapLogPoint", { text = "◆", texthl = "DapLogPoint", linehl = "", numhl = "" })

      local mason_registry = require("mason-registry")

      local ensured_installed = {}
      local setup = function()
        for server, _ in pairs(servers) do
          if opts.server_config[server] then
            if not mason_registry.has_package(server) then
              ensured_installed[#ensured_installed + 1] = server
            end
            require("dap").adapters[server] = opts.server_config[server](server)
          end
        end
      end
      require("dapui").setup({
        layouts = opts.layouts,
      })

      require("mason-nvim-dap").setup({
        ensure_installed = ensured_installed,
        automatic_installation = true,
        handlers = {
          python = function(config)
            local pypath = (vim.env["VIRTUAL_ENV"] or "/usr") .. "/bin/python3.10"
            config.adapter = {
              type = "executable",
              command = pypath,
              args = {
                "-m",
                "debugpy.adapter",
              },
            }
            require("mason-nvim-dap").default_setup(config)
          end,
        },
      })
      setup()
    end,
  },
}
